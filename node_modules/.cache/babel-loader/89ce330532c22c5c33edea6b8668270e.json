{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\React\\\\project\\\\src\\\\components\\\\Rating.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Symbol from './RatingSymbol';\n\nclass Rating extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Indicates the value that is displayed to the user in the form of symbols.\n      // It can be either 0 (for no displayed symbols) or (0, end]\n      displayValue: this.props.value,\n      // Indicates if the user is currently hovering over the rating element\n      interacting: false\n    };\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n    this.symbolMouseMove = this.symbolMouseMove.bind(this);\n    this.symbolClick = this.symbolClick.bind(this);\n    this.symbolEnd = this.symbolEnd.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const valueChanged = this.props.value !== nextProps.value;\n    this.setState(prevState => ({\n      displayValue: valueChanged ? nextProps.value : prevState.displayValue\n    }));\n  } // NOTE: This callback is a little bit fragile. Needs some \"care\" because\n  // it relies on brittle state kept with different props and state\n  // combinations to try to figure out from where we are coming, I mean, what\n  // caused this update.\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // When hover ends, call this.props.onHover with no value.\n    if (prevState.interacting && !this.state.interacting) {\n      return this.props.onHover();\n    } // When hover over.\n    // Hover in should only be emitted while we are hovering (interacting),\n    // unless we changed the value, usually originated by an onClick event.\n    // We do not want to emit a hover in event again on the clicked\n    // symbol.\n\n\n    if (this.state.interacting && prevProps.value == this.props.value) {\n      this.props.onHover(this.state.displayValue);\n    }\n  }\n\n  symbolEnd(symbolIndex, event) {\n    // Do not raise the click event on quiet mode when a touch end is received.\n    // On quiet mode the touch end event only notifies that we have left the\n    // symbol. We wait for the actual click event to call the symbolClick.\n    // On not quiet mode we simulate the click event on touch end and we just\n    // prevent the real on click event to be raised.\n    // NOTE: I know how we manage click events on touch devices is a little bit\n    // weird because we do not notify the starting value that was clicked but\n    // the last (touched) value.\n    if (!this.props.quiet) {\n      this.symbolClick(symbolIndex, event);\n      event.preventDefault();\n    } // On touch end we are \"leaving\" the symbol.\n\n\n    this.onMouseLeave();\n  }\n\n  symbolClick(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    this.props.onClick(value, event);\n  }\n\n  symbolMouseMove(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event); // This call should cause an update only if the state changes.\n    // Mainly the first time the mouse enters and whenever the value changes.\n    // So DidComponentUpdate is NOT called for every mouse movement.\n\n    this.setState({\n      interacting: !this.props.readonly,\n      displayValue: value\n    });\n  }\n\n  onMouseLeave() {\n    this.setState({\n      displayValue: this.props.value,\n      interacting: false\n    });\n  }\n\n  calculateDisplayValue(symbolIndex, event) {\n    const percentage = this.calculateHoverPercentage(event); // Get the closest top fraction.\n\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions; // Truncate decimal trying to avoid float precission issues.\n\n    const precision = 10 ** 3;\n    const displayValue = symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision); // ensure the returned value is greater than 0 and lower than totalSymbols\n\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n  }\n\n  calculateHoverPercentage(event) {\n    const clientX = event.nativeEvent.type.indexOf('touch') > -1 ? event.nativeEvent.type.indexOf('touchend') > -1 ? event.changedTouches[0].clientX : event.touches[0].clientX : event.clientX;\n    const targetRect = event.target.getBoundingClientRect();\n    const delta = this.props.direction === 'rtl' ? targetRect.right - clientX : clientX - targetRect.left; // Returning 0 if the delta is negative solves the flickering issue\n\n    return delta < 0 ? 0 : delta / targetRect.width;\n  }\n\n  render() {\n    const {\n      readonly,\n      quiet,\n      totalSymbols,\n      value,\n      placeholderValue,\n      direction,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      className,\n      id,\n      style,\n      tabIndex\n    } = this.props;\n    const {\n      displayValue,\n      interacting\n    } = this.state;\n    const symbolNodes = [];\n    const empty = [].concat(emptySymbol);\n    const full = [].concat(fullSymbol);\n    const placeholder = [].concat(placeholderSymbol);\n    const shouldDisplayPlaceholder = placeholderValue !== 0 && value === 0 && !interacting; // The value that will be used as base for calculating how to render the symbols\n\n    let renderedValue;\n\n    if (shouldDisplayPlaceholder) {\n      renderedValue = placeholderValue;\n    } else {\n      renderedValue = quiet ? value : displayValue;\n    } // The amount of full symbols\n\n\n    const fullSymbols = Math.floor(renderedValue);\n\n    for (let i = 0; i < totalSymbols; i++) {\n      let percent; // Calculate each symbol's fullness percentage\n\n      if (i - fullSymbols < 0) {\n        percent = 100;\n      } else if (i - fullSymbols === 0) {\n        percent = (renderedValue - i) * 100;\n      } else {\n        percent = 0;\n      }\n\n      symbolNodes.push( /*#__PURE__*/_jsxDEV(Symbol, {\n        index: i,\n        readonly: readonly,\n        inactiveIcon: empty[i % empty.length],\n        activeIcon: shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length],\n        percent: percent,\n        direction: direction,\n        ...(!readonly && {\n          onClick: this.symbolClick,\n          onMouseMove: this.symbolMouseMove,\n          onTouchMove: this.symbolMouseMove,\n          onTouchEnd: this.symbolEnd\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      id: id,\n      style: { ...style,\n        display: 'inline-block',\n        direction\n      },\n      className: className,\n      tabIndex: tabIndex,\n      \"aria-label\": this.props['aria-label'],\n      ...(!readonly && {\n        onMouseLeave: this.onMouseLeave\n      }),\n      children: symbolNodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Define propTypes only in development.\n\n\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  totalSymbols: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  // Always >= 0\n  placeholderValue: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  quiet: PropTypes.bool.isRequired,\n  fractions: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  emptySymbol: PropTypes.oneOfType([// Array of class names and/or style objects.\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])), // Class names.\n  PropTypes.string, // Style objects.\n  PropTypes.object, // React element\n  PropTypes.element]).isRequired,\n  fullSymbol: PropTypes.oneOfType([// Array of class names and/or style objects.\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])), // Class names.\n  PropTypes.string, // Style objects.\n  PropTypes.object, // React element\n  PropTypes.element]).isRequired,\n  placeholderSymbol: PropTypes.oneOfType([// Array of class names and/or style objects.\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])), // Class names.\n  PropTypes.string, // Style objects.\n  PropTypes.object, // React element\n  PropTypes.element]),\n  onClick: PropTypes.func.isRequired,\n  onHover: PropTypes.func.isRequired\n};\nexport default Rating;","map":{"version":3,"sources":["C:/Users/user/React/project/src/components/Rating.js"],"names":["React","PropTypes","Symbol","Rating","PureComponent","constructor","props","state","displayValue","value","interacting","onMouseLeave","bind","symbolMouseMove","symbolClick","symbolEnd","UNSAFE_componentWillReceiveProps","nextProps","valueChanged","setState","prevState","componentDidUpdate","prevProps","onHover","symbolIndex","event","quiet","preventDefault","calculateDisplayValue","onClick","readonly","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","direction","right","left","width","render","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","className","id","style","tabIndex","symbolNodes","empty","concat","full","placeholder","shouldDisplayPlaceholder","renderedValue","fullSymbols","i","percent","push","length","onMouseMove","onTouchMove","onTouchEnd","display","propTypes","__DEV__","number","isRequired","bool","string","oneOfType","arrayOf","object","element","func"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Symbol from './RatingSymbol'\r\n\r\nclass Rating extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      // Indicates the value that is displayed to the user in the form of symbols.\r\n      // It can be either 0 (for no displayed symbols) or (0, end]\r\n      displayValue: this.props.value,\r\n      // Indicates if the user is currently hovering over the rating element\r\n      interacting: false,\r\n    }\r\n    this.onMouseLeave = this.onMouseLeave.bind(this)\r\n    this.symbolMouseMove = this.symbolMouseMove.bind(this)\r\n    this.symbolClick = this.symbolClick.bind(this)\r\n    this.symbolEnd = this.symbolEnd.bind(this)\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    const valueChanged = this.props.value !== nextProps.value\r\n    this.setState((prevState) => ({\r\n      displayValue: valueChanged ? nextProps.value : prevState.displayValue,\r\n    }))\r\n  }\r\n\r\n  // NOTE: This callback is a little bit fragile. Needs some \"care\" because\r\n  // it relies on brittle state kept with different props and state\r\n  // combinations to try to figure out from where we are coming, I mean, what\r\n  // caused this update.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // When hover ends, call this.props.onHover with no value.\r\n    if (prevState.interacting && !this.state.interacting) {\r\n      return this.props.onHover()\r\n    }\r\n\r\n    // When hover over.\r\n    // Hover in should only be emitted while we are hovering (interacting),\r\n    // unless we changed the value, usually originated by an onClick event.\r\n    // We do not want to emit a hover in event again on the clicked\r\n    // symbol.\r\n    if (this.state.interacting && prevProps.value == this.props.value) {\r\n      this.props.onHover(this.state.displayValue)\r\n    }\r\n  }\r\n\r\n  symbolEnd(symbolIndex, event) {\r\n    // Do not raise the click event on quiet mode when a touch end is received.\r\n    // On quiet mode the touch end event only notifies that we have left the\r\n    // symbol. We wait for the actual click event to call the symbolClick.\r\n    // On not quiet mode we simulate the click event on touch end and we just\r\n    // prevent the real on click event to be raised.\r\n    // NOTE: I know how we manage click events on touch devices is a little bit\r\n    // weird because we do not notify the starting value that was clicked but\r\n    // the last (touched) value.\r\n    if (!this.props.quiet) {\r\n      this.symbolClick(symbolIndex, event)\r\n      event.preventDefault()\r\n    }\r\n    // On touch end we are \"leaving\" the symbol.\r\n    this.onMouseLeave()\r\n  }\r\n\r\n  symbolClick(symbolIndex, event) {\r\n    const value = this.calculateDisplayValue(symbolIndex, event)\r\n    this.props.onClick(value, event)\r\n  }\r\n\r\n  symbolMouseMove(symbolIndex, event) {\r\n    const value = this.calculateDisplayValue(symbolIndex, event)\r\n    // This call should cause an update only if the state changes.\r\n    // Mainly the first time the mouse enters and whenever the value changes.\r\n    // So DidComponentUpdate is NOT called for every mouse movement.\r\n    this.setState({\r\n      interacting: !this.props.readonly,\r\n      displayValue: value,\r\n    })\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.setState({\r\n      displayValue: this.props.value,\r\n      interacting: false,\r\n    })\r\n  }\r\n\r\n  calculateDisplayValue(symbolIndex, event) {\r\n    const percentage = this.calculateHoverPercentage(event)\r\n    // Get the closest top fraction.\r\n    const fraction =\r\n      Math.ceil((percentage % 1) * this.props.fractions) / this.props.fractions\r\n    // Truncate decimal trying to avoid float precission issues.\r\n    const precision = 10 ** 3\r\n    const displayValue =\r\n      symbolIndex +\r\n      (Math.floor(percentage) + Math.floor(fraction * precision) / precision)\r\n    // ensure the returned value is greater than 0 and lower than totalSymbols\r\n    return displayValue > 0\r\n      ? displayValue > this.props.totalSymbols\r\n        ? this.props.totalSymbols\r\n        : displayValue\r\n      : 1 / this.props.fractions\r\n  }\r\n\r\n  calculateHoverPercentage(event) {\r\n    const clientX =\r\n      event.nativeEvent.type.indexOf('touch') > -1\r\n        ? event.nativeEvent.type.indexOf('touchend') > -1\r\n          ? event.changedTouches[0].clientX\r\n          : event.touches[0].clientX\r\n        : event.clientX\r\n\r\n    const targetRect = event.target.getBoundingClientRect()\r\n    const delta =\r\n      this.props.direction === 'rtl'\r\n        ? targetRect.right - clientX\r\n        : clientX - targetRect.left\r\n\r\n    // Returning 0 if the delta is negative solves the flickering issue\r\n    return delta < 0 ? 0 : delta / targetRect.width\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      readonly,\r\n      quiet,\r\n      totalSymbols,\r\n      value,\r\n      placeholderValue,\r\n      direction,\r\n      emptySymbol,\r\n      fullSymbol,\r\n      placeholderSymbol,\r\n      className,\r\n      id,\r\n      style,\r\n      tabIndex,\r\n    } = this.props\r\n    const { displayValue, interacting } = this.state\r\n    const symbolNodes = []\r\n    const empty = [].concat(emptySymbol)\r\n    const full = [].concat(fullSymbol)\r\n    const placeholder = [].concat(placeholderSymbol)\r\n    const shouldDisplayPlaceholder =\r\n      placeholderValue !== 0 && value === 0 && !interacting\r\n\r\n    // The value that will be used as base for calculating how to render the symbols\r\n    let renderedValue\r\n    if (shouldDisplayPlaceholder) {\r\n      renderedValue = placeholderValue\r\n    } else {\r\n      renderedValue = quiet ? value : displayValue\r\n    }\r\n\r\n    // The amount of full symbols\r\n    const fullSymbols = Math.floor(renderedValue)\r\n\r\n    for (let i = 0; i < totalSymbols; i++) {\r\n      let percent\r\n      // Calculate each symbol's fullness percentage\r\n      if (i - fullSymbols < 0) {\r\n        percent = 100\r\n      } else if (i - fullSymbols === 0) {\r\n        percent = (renderedValue - i) * 100\r\n      } else {\r\n        percent = 0\r\n      }\r\n\r\n      symbolNodes.push(\r\n        <Symbol\r\n          key={i}\r\n          index={i}\r\n          readonly={readonly}\r\n          inactiveIcon={empty[i % empty.length]}\r\n          activeIcon={\r\n            shouldDisplayPlaceholder\r\n              ? placeholder[i % full.length]\r\n              : full[i % full.length]\r\n          }\r\n          percent={percent}\r\n          direction={direction}\r\n          {...(!readonly && {\r\n            onClick: this.symbolClick,\r\n            onMouseMove: this.symbolMouseMove,\r\n            onTouchMove: this.symbolMouseMove,\r\n            onTouchEnd: this.symbolEnd,\r\n          })}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <span\r\n        id={id}\r\n        style={{ ...style, display: 'inline-block', direction }}\r\n        className={className}\r\n        tabIndex={tabIndex}\r\n        aria-label={this.props['aria-label']}\r\n        {...(!readonly && {\r\n          onMouseLeave: this.onMouseLeave,\r\n        })}\r\n      >\r\n        {symbolNodes}\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\n// Define propTypes only in development.\r\nRating.propTypes = typeof __DEV__ !== 'undefined' &&\r\n  __DEV__ && {\r\n    totalSymbols: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired, // Always >= 0\r\n    placeholderValue: PropTypes.number.isRequired,\r\n    readonly: PropTypes.bool.isRequired,\r\n    quiet: PropTypes.bool.isRequired,\r\n    fractions: PropTypes.number.isRequired,\r\n    direction: PropTypes.string.isRequired,\r\n    emptySymbol: PropTypes.oneOfType([\r\n      // Array of class names and/or style objects.\r\n      PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n          PropTypes.string,\r\n          PropTypes.object,\r\n          PropTypes.element,\r\n        ])\r\n      ),\r\n      // Class names.\r\n      PropTypes.string,\r\n      // Style objects.\r\n      PropTypes.object,\r\n      // React element\r\n      PropTypes.element,\r\n    ]).isRequired,\r\n    fullSymbol: PropTypes.oneOfType([\r\n      // Array of class names and/or style objects.\r\n      PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n          PropTypes.string,\r\n          PropTypes.object,\r\n          PropTypes.element,\r\n        ])\r\n      ),\r\n      // Class names.\r\n      PropTypes.string,\r\n      // Style objects.\r\n      PropTypes.object,\r\n      // React element\r\n      PropTypes.element,\r\n    ]).isRequired,\r\n    placeholderSymbol: PropTypes.oneOfType([\r\n      // Array of class names and/or style objects.\r\n      PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n          PropTypes.string,\r\n          PropTypes.object,\r\n          PropTypes.element,\r\n        ])\r\n      ),\r\n      // Class names.\r\n      PropTypes.string,\r\n      // Style objects.\r\n      PropTypes.object,\r\n      // React element\r\n      PropTypes.element,\r\n    ]),\r\n    onClick: PropTypes.func.isRequired,\r\n    onHover: PropTypes.func.isRequired,\r\n  }\r\n\r\nexport default Rating\r\n"]},"metadata":{},"sourceType":"module"}